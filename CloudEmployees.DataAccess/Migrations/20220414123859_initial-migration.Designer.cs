// <auto-generated />
using System;
using CloudEmployees.DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudEmployees.DataAccess.Migrations
{
    [DbContext(typeof(CloudEmployeesContext))]
    [Migration("20220414123859_initial-migration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId1")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyId1");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId1")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DepartmentId1")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateOnly>("EmploymentDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyId1");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentId1");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.EmployeeManager", b =>
                {
                    b.Property<Guid>("EmployeeManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("char(36)");

                    b.HasKey("EmployeeManagerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("EmployeeManager");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.EmployeeSubordinate", b =>
                {
                    b.Property<Guid>("EmployeeSubordinateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubordinateEmployeeSubordinateId")
                        .HasColumnType("char(36)");

                    b.HasKey("EmployeeSubordinateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SubordinateEmployeeSubordinateId");

                    b.ToTable("EmployeeSubordinate");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Address", b =>
                {
                    b.HasOne("CloudEmployees.Entities.Concrete.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("CloudEmployees.Entities.Concrete.Address", "CompanyId");

                    b.HasOne("CloudEmployees.Entities.Concrete.Employee", "Employee")
                        .WithOne("Address")
                        .HasForeignKey("CloudEmployees.Entities.Concrete.Address", "EmployeeId");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Department", b =>
                {
                    b.HasOne("CloudEmployees.Entities.Concrete.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudEmployees.Entities.Concrete.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("CloudEmployees.Entities.Concrete.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudEmployees.Entities.Concrete.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudEmployees.Entities.Concrete.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudEmployees.Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudEmployees.Entities.Concrete.EmployeeManager", "Manager")
                        .WithMany("Employee")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.EmployeeManager", b =>
                {
                    b.HasOne("CloudEmployees.Entities.Concrete.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.EmployeeSubordinate", b =>
                {
                    b.HasOne("CloudEmployees.Entities.Concrete.Employee", "Employee")
                        .WithMany("Subordinates")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("CloudEmployees.Entities.Concrete.EmployeeSubordinate", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateEmployeeSubordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Company", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("CloudEmployees.Entities.Concrete.EmployeeManager", b =>
                {
                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
